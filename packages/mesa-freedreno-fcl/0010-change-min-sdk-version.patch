diff --git a/include/android_stub/android/hardware_buffer.h b/include/android_stub/android/hardware_buffer.h
index aa03b4b..a40fdd0 100644
--- a/include/android_stub/android/hardware_buffer.h
+++ b/include/android_stub/android/hardware_buffer.h
@@ -353,7 +353,7 @@ typedef struct AHardwareBuffer AHardwareBuffer;
  * any reason. The returned buffer has a reference count of 1.
  */
 int AHardwareBuffer_allocate(const AHardwareBuffer_Desc* desc,
-        AHardwareBuffer** outBuffer) __INTRODUCED_IN(26);
+        AHardwareBuffer** outBuffer) __INTRODUCED_IN(1);
 /**
  * Acquire a reference on the given AHardwareBuffer object.
  *
@@ -362,7 +362,7 @@ int AHardwareBuffer_allocate(const AHardwareBuffer_Desc* desc,
  *
  * Available since API level 26.
  */
-void AHardwareBuffer_acquire(AHardwareBuffer* buffer) __INTRODUCED_IN(26);
+void AHardwareBuffer_acquire(AHardwareBuffer* buffer) __INTRODUCED_IN(1);
 
 /**
  * Remove a reference that was previously acquired with
@@ -370,7 +370,7 @@ void AHardwareBuffer_acquire(AHardwareBuffer* buffer) __INTRODUCED_IN(26);
  *
  * Available since API level 26.
  */
-void AHardwareBuffer_release(AHardwareBuffer* buffer) __INTRODUCED_IN(26);
+void AHardwareBuffer_release(AHardwareBuffer* buffer) __INTRODUCED_IN(1);
 
 /**
  * Return a description of the AHardwareBuffer in the passed
@@ -379,7 +379,7 @@ void AHardwareBuffer_release(AHardwareBuffer* buffer) __INTRODUCED_IN(26);
  * Available since API level 26.
  */
 void AHardwareBuffer_describe(const AHardwareBuffer* buffer,
-        AHardwareBuffer_Desc* outDesc) __INTRODUCED_IN(26);
+        AHardwareBuffer_Desc* outDesc) __INTRODUCED_IN(1);
 
 /**
  * Lock the AHardwareBuffer for direct CPU access.
@@ -434,7 +434,7 @@ void AHardwareBuffer_describe(const AHardwareBuffer* buffer,
  * reason.
  */
 int AHardwareBuffer_lock(AHardwareBuffer* buffer, uint64_t usage,
-        int32_t fence, const ARect* rect, void** outVirtualAddress) __INTRODUCED_IN(26);
+        int32_t fence, const ARect* rect, void** outVirtualAddress) __INTRODUCED_IN(1);
 
 /**
  * Lock a potentially multi-planar AHardwareBuffer for direct CPU access.
@@ -464,7 +464,7 @@ int AHardwareBuffer_lock(AHardwareBuffer* buffer, uint64_t usage,
  * reason.
  */
 int AHardwareBuffer_lockPlanes(AHardwareBuffer* buffer, uint64_t usage,
-        int32_t fence, const ARect* rect, AHardwareBuffer_Planes* outPlanes) __INTRODUCED_IN(29);
+        int32_t fence, const ARect* rect, AHardwareBuffer_Planes* outPlanes) __INTRODUCED_IN(1);
 
 /**
  * Unlock the AHardwareBuffer from direct CPU access.
@@ -484,7 +484,7 @@ int AHardwareBuffer_lockPlanes(AHardwareBuffer* buffer, uint64_t usage,
  * \return 0 on success. -EINVAL if \a buffer is NULL. Error number if
  * the unlock fails for any reason.
  */
-int AHardwareBuffer_unlock(AHardwareBuffer* buffer, int32_t* fence) __INTRODUCED_IN(26);
+int AHardwareBuffer_unlock(AHardwareBuffer* buffer, int32_t* fence) __INTRODUCED_IN(1);
 
 /**
  * Send the AHardwareBuffer to an AF_UNIX socket.
@@ -494,7 +494,7 @@ int AHardwareBuffer_unlock(AHardwareBuffer* buffer, int32_t* fence) __INTRODUCED
  * \return 0 on success, -EINVAL if \a buffer is NULL, or an error
  * number if the operation fails for any reason.
  */
-int AHardwareBuffer_sendHandleToUnixSocket(const AHardwareBuffer* buffer, int socketFd) __INTRODUCED_IN(26);
+int AHardwareBuffer_sendHandleToUnixSocket(const AHardwareBuffer* buffer, int socketFd) __INTRODUCED_IN(1);
 
 /**
  * Receive an AHardwareBuffer from an AF_UNIX socket.
@@ -504,7 +504,7 @@ int AHardwareBuffer_sendHandleToUnixSocket(const AHardwareBuffer* buffer, int so
  * \return 0 on success, -EINVAL if \a outBuffer is NULL, or an error
  * number if the operation fails for any reason.
  */
-int AHardwareBuffer_recvHandleFromUnixSocket(int socketFd, AHardwareBuffer** outBuffer) __INTRODUCED_IN(26);
+int AHardwareBuffer_recvHandleFromUnixSocket(int socketFd, AHardwareBuffer** outBuffer) __INTRODUCED_IN(1);
 
 /**
  * Test whether the given format and usage flag combination is
@@ -525,7 +525,7 @@ int AHardwareBuffer_recvHandleFromUnixSocket(int socketFd, AHardwareBuffer** out
  * \return 1 if the format and usage flag combination is allocatable,
  *     0 otherwise.
  */
-int AHardwareBuffer_isSupported(const AHardwareBuffer_Desc* desc) __INTRODUCED_IN(29);
+int AHardwareBuffer_isSupported(const AHardwareBuffer_Desc* desc) __INTRODUCED_IN(1);
 
 /**
  * Lock an AHardwareBuffer for direct CPU access.
@@ -540,7 +540,7 @@ int AHardwareBuffer_isSupported(const AHardwareBuffer_Desc* desc) __INTRODUCED_I
  */
 int AHardwareBuffer_lockAndGetInfo(AHardwareBuffer* buffer, uint64_t usage,
         int32_t fence, const ARect* rect, void** outVirtualAddress,
-        int32_t* outBytesPerPixel, int32_t* outBytesPerStride) __INTRODUCED_IN(29);
+        int32_t* outBytesPerPixel, int32_t* outBytesPerStride) __INTRODUCED_IN(1);
 
 __END_DECLS
 
diff --git a/include/android_stub/android/log.h b/include/android_stub/android/log.h
index 5dc365a..d4a6c4c 100644
--- a/include/android_stub/android/log.h
+++ b/include/android_stub/android/log.h
@@ -230,7 +230,7 @@ typedef void (*__android_aborter_function)(const char* abort_message);
  *
  * Available since API level 30.
  */
-void __android_log_write_log_message(struct __android_log_message* log_message) __INTRODUCED_IN(30);
+void __android_log_write_log_message(struct __android_log_message* log_message) __INTRODUCED_IN(1);
 
 /**
  * Sets a user defined logger function.  All log messages sent to liblog will be set to the
@@ -242,7 +242,7 @@ void __android_log_write_log_message(struct __android_log_message* log_message)
  *
  * Available since API level 30.
  */
-void __android_log_set_logger(__android_logger_function logger) __INTRODUCED_IN(30);
+void __android_log_set_logger(__android_logger_function logger) __INTRODUCED_IN(1);
 
 /**
  * Writes the log message to logd.  This is an __android_logger_function and can be provided to
@@ -252,7 +252,7 @@ void __android_log_set_logger(__android_logger_function logger) __INTRODUCED_IN(
  *
  * Available since API level 30.
  */
-void __android_log_logd_logger(const struct __android_log_message* log_message) __INTRODUCED_IN(30);
+void __android_log_logd_logger(const struct __android_log_message* log_message) __INTRODUCED_IN(1);
 
 /**
  * Writes the log message to stderr.  This is an __android_logger_function and can be provided to
@@ -263,7 +263,7 @@ void __android_log_logd_logger(const struct __android_log_message* log_message)
  * Available since API level 30.
  */
 void __android_log_stderr_logger(const struct __android_log_message* log_message)
-    __INTRODUCED_IN(30);
+    __INTRODUCED_IN(1);
 
 /**
  * Sets a user defined aborter function that is called for __android_log_assert() failures.  This
@@ -274,7 +274,7 @@ void __android_log_stderr_logger(const struct __android_log_message* log_message
  *
  * Available since API level 30.
  */
-void __android_log_set_aborter(__android_aborter_function aborter) __INTRODUCED_IN(30);
+void __android_log_set_aborter(__android_aborter_function aborter) __INTRODUCED_IN(1);
 
 /**
  * Calls the stored aborter function.  This allows for other logging libraries to use the same
@@ -285,7 +285,7 @@ void __android_log_set_aborter(__android_aborter_function aborter) __INTRODUCED_
  *
  * Available since API level 30.
  */
-void __android_log_call_aborter(const char* abort_message) __INTRODUCED_IN(30);
+void __android_log_call_aborter(const char* abort_message) __INTRODUCED_IN(1);
 
 /**
  * Sets android_set_abort_message() on device then aborts().  This is the default aborter.
@@ -296,7 +296,7 @@ void __android_log_call_aborter(const char* abort_message) __INTRODUCED_IN(30);
  * Available since API level 30.
  */
 void __android_log_default_aborter(const char* abort_message) __attribute__((noreturn))
-__INTRODUCED_IN(30);
+__INTRODUCED_IN(1);
 
 /**
  * Use the per-tag properties "log.tag.<tagname>" along with the minimum priority from
@@ -315,7 +315,7 @@ __INTRODUCED_IN(30);
  *
  * Available since API level 30.
  */
-int __android_log_is_loggable(int prio, const char* tag, int default_prio) __INTRODUCED_IN(30);
+int __android_log_is_loggable(int prio, const char* tag, int default_prio) __INTRODUCED_IN(1);
 
 /**
  * Use the per-tag properties "log.tag.<tagname>" along with the minimum priority from
@@ -336,7 +336,7 @@ int __android_log_is_loggable(int prio, const char* tag, int default_prio) __INT
  * Available since API level 30.
  */
 int __android_log_is_loggable_len(int prio, const char* tag, size_t len, int default_prio)
-    __INTRODUCED_IN(30);
+    __INTRODUCED_IN(1);
 
 /**
  * Sets the minimum priority that will be logged for this process.
@@ -347,7 +347,7 @@ int __android_log_is_loggable_len(int prio, const char* tag, size_t len, int def
  *
  * Available since API level 30.
  */
-int32_t __android_log_set_minimum_priority(int32_t priority) __INTRODUCED_IN(30);
+int32_t __android_log_set_minimum_priority(int32_t priority) __INTRODUCED_IN(1);
 
 /**
  * Gets the minimum priority that will be logged for this process.  If none has been set by a
@@ -358,7 +358,7 @@ int32_t __android_log_set_minimum_priority(int32_t priority) __INTRODUCED_IN(30)
  *
  * Available since API level 30.
  */
-int32_t __android_log_get_minimum_priority(void) __INTRODUCED_IN(30);
+int32_t __android_log_get_minimum_priority(void) __INTRODUCED_IN(1);
 
 /**
  * Sets the default tag if no tag is provided when writing a log message.  Defaults to
@@ -369,7 +369,7 @@ int32_t __android_log_get_minimum_priority(void) __INTRODUCED_IN(30);
  *
  * Available since API level 30.
  */
-void __android_log_set_default_tag(const char* tag) __INTRODUCED_IN(30);
+void __android_log_set_default_tag(const char* tag) __INTRODUCED_IN(1);
 
 #ifdef __cplusplus
 }
diff --git a/include/android_stub/android/native_window.h b/include/android_stub/android/native_window.h
index a3a45e3..0507393 100644
--- a/include/android_stub/android/native_window.h
+++ b/include/android_stub/android/native_window.h
@@ -193,7 +193,7 @@ int32_t ANativeWindow_unlockAndPost(ANativeWindow* window);
  * \param transform combination of {@link ANativeWindowTransform} flags
  * \return 0 for success, or -EINVAL if \p transform is invalid
  */
-int32_t ANativeWindow_setBuffersTransform(ANativeWindow* window, int32_t transform) __INTRODUCED_IN(26);
+int32_t ANativeWindow_setBuffersTransform(ANativeWindow* window, int32_t transform) __INTRODUCED_IN(1);
 
 /**
  * All buffers queued after this call will be associated with the dataSpace
@@ -211,7 +211,7 @@ int32_t ANativeWindow_setBuffersTransform(ANativeWindow* window, int32_t transfo
  * \return 0 for success, -EINVAL if window is invalid or the dataspace is not
  * supported.
  */
-int32_t ANativeWindow_setBuffersDataSpace(ANativeWindow* window, int32_t dataSpace) __INTRODUCED_IN(28);
+int32_t ANativeWindow_setBuffersDataSpace(ANativeWindow* window, int32_t dataSpace) __INTRODUCED_IN(1);
 
 /**
  * Get the dataspace of the buffers in window.
@@ -221,7 +221,7 @@ int32_t ANativeWindow_setBuffersDataSpace(ANativeWindow* window, int32_t dataSpa
  * \return the dataspace of buffers in window, ADATASPACE_UNKNOWN is returned if
  * dataspace is unknown, or -EINVAL if window is invalid.
  */
-int32_t ANativeWindow_getBuffersDataSpace(ANativeWindow* window) __INTRODUCED_IN(28);
+int32_t ANativeWindow_getBuffersDataSpace(ANativeWindow* window) __INTRODUCED_IN(1);
 
 /** Compatibility value for ANativeWindow_setFrameRate. */
 enum ANativeWindow_FrameRateCompatibility {
diff --git a/include/android_stub/ndk/sync.h b/include/android_stub/ndk/sync.h
index 38ccb68..7d600ed 100644
--- a/include/android_stub/ndk/sync.h
+++ b/include/android_stub/ndk/sync.h
@@ -64,7 +64,7 @@ __BEGIN_DECLS
  *
  * Available since API level 26.
  */
-int32_t sync_merge(const char* name, int32_t fd1, int32_t fd2) __INTRODUCED_IN(26);
+int32_t sync_merge(const char* name, int32_t fd1, int32_t fd2) __INTRODUCED_IN(1);
 
 /**
  * Retrieve detailed information about a sync file and its fences.
@@ -73,7 +73,7 @@ int32_t sync_merge(const char* name, int32_t fd1, int32_t fd2) __INTRODUCED_IN(2
  *
  * Available since API level 26.
  */
-struct sync_file_info* sync_file_info(int32_t fd) __INTRODUCED_IN(26);
+struct sync_file_info* sync_file_info(int32_t fd) __INTRODUCED_IN(1);
 
 /**
  * Get the array of fence infos from the sync file's info.
@@ -97,7 +97,7 @@ static inline struct sync_fence_info* sync_get_fence_info(const struct sync_file
  *
  * Available since API level 26.
  */
-void sync_file_info_free(struct sync_file_info* info) __INTRODUCED_IN(26);
+void sync_file_info_free(struct sync_file_info* info) __INTRODUCED_IN(1);
 
 __END_DECLS
 
