--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -1554,7 +1554,7 @@
 #endif
       }
 
-      if (wsi->sw)
+      if (wsi->sw || swapchain->present_mode == VK_PRESENT_MODE_IMMEDIATE_KHR)
 	      wsi->WaitForFences(device, 1, &swapchain->fences[image_index],
 				 true, ~0ull);
 
--- a/src/vulkan/wsi/wsi_common_drm.c
+++ b/src/vulkan/wsi/wsi_common_drm.c
@@ -45,6 +45,9 @@
 static VkResult
 wsi_dma_buf_export_sync_file(int dma_buf_fd, int *sync_file_fd)
 {
+#if defined __ANDROID__
+   return VK_ERROR_FEATURE_NOT_PRESENT;
+#else
    /* Don't keep trying an IOCTL that doesn't exist. */
    static bool no_dma_buf_sync_file = false;
    if (no_dma_buf_sync_file)
@@ -68,11 +71,15 @@
    *sync_file_fd = export.fd;
 
    return VK_SUCCESS;
+#endif
 }
 
 static VkResult
 wsi_dma_buf_import_sync_file(int dma_buf_fd, int sync_file_fd)
 {
+#if defined __ANDROID__
+   return VK_ERROR_FEATURE_NOT_PRESENT;
+#else
    /* Don't keep trying an IOCTL that doesn't exist. */
    static bool no_dma_buf_sync_file = false;
    if (no_dma_buf_sync_file)
@@ -94,6 +101,7 @@
    }
 
    return VK_SUCCESS;
+#endif
 }
 
 static VkResult
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -456,7 +456,7 @@
 
 static const VkFormat formats[] = {
    VK_FORMAT_R5G6B5_UNORM_PACK16,
-   VK_FORMAT_B8G8R8A8_SRGB,
+   // VK_FORMAT_B8G8R8A8_SRGB,
    VK_FORMAT_B8G8R8A8_UNORM,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32,
 };
@@ -1406,8 +1406,6 @@
    if (chain->has_dri3_modifiers)
       options |= XCB_PRESENT_OPTION_SUBOPTIMAL;
 
-   xshmfence_reset(image->shm_fence);
-
    if (!chain->base.image_info.explicit_sync) {
       ++chain->sent_image_count;
       assert(chain->sent_image_count <= chain->base.image_count);
@@ -2147,14 +2145,23 @@
          return VK_ERROR_OUT_OF_HOST_MEMORY;
 
       cookie =
-         xcb_dri3_pixmap_from_buffer_checked(chain->conn,
-                                             image->pixmap,
-                                             chain->window,
-                                             image->base.sizes[0],
-                                             pCreateInfo->imageExtent.width,
-                                             pCreateInfo->imageExtent.height,
-                                             image->base.row_pitches[0],
-                                             chain->depth, bpp, fd);
+         xcb_dri3_pixmap_from_buffers_checked(chain->conn,
+                                              image->pixmap,
+                                              chain->window,
+                                              image->base.num_planes,
+                                              pCreateInfo->imageExtent.width,
+                                              pCreateInfo->imageExtent.height,
+                                              image->base.row_pitches[0],
+                                              image->base.offsets[0],
+                                              0,
+                                              0,
+                                              0,
+                                              0,
+                                              0,
+                                              0,
+                                              chain->depth, bpp,
+                                              1274,
+                                              &fd);
    }
 
    error = xcb_request_check(chain->conn, cookie);
@@ -2184,6 +2191,9 @@
    }
 #endif
 
+   image->sync_fence = 0;
+   return VK_SUCCESS;
+
 out_fence:
    fence_fd = xshmfence_alloc_shm();
    if (fence_fd < 0)
@@ -2226,12 +2237,6 @@
 {
    xcb_void_cookie_t cookie;
    if (!chain->base.wsi->sw || chain->has_mit_shm) {
-#ifdef HAVE_X11_DRM
-      cookie = xcb_sync_destroy_fence(chain->conn, image->sync_fence);
-      xcb_discard_reply(chain->conn, cookie.sequence);
-      xshmfence_unmap_shm(image->shm_fence);
-#endif
-
       cookie = xcb_free_pixmap(chain->conn, image->pixmap);
       xcb_discard_reply(chain->conn, cookie.sequence);
 #ifdef HAVE_X11_DRM
